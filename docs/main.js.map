{"version":3,"sources":["./src/environments/environment.ts","./src/app/services/weatherdata.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/display/display.component.ts","./src/app/display/display.component.html","./src/app/select/select.component.ts","./src/app/select/select.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACbnE;AAAA;AAAA;AAAA;AAAA;AAA+B;;;AAE/B,IAAI,UAAU,GAAW,8BAA8B;AACvD,IAAI,MAAM,GAAW,iCAAiC,EAAE,2BAA2B;AAK5E,MAAM,kBAAkB;IAC7B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IACzC,IAAI,CAAC,QAAgB;QACnB,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,oBAAoB,GAAC,MAAM,GAAC,KAAK,GAAG,QAAQ,GAAE,SAAS,CAAC;QACjG,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,GAAE,qBAAqB,GAAC,MAAM,GAAC,KAAK,GAAG,QAAQ,GAAE,gBAAgB,CAAC;QACzG,OAAO,qDAAQ,CAAC,CAAC,OAAO,EAAG,QAAQ,CAAC,CAAC,CAAC;IAExC,CAAC;;oFAPU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM;;;;;;;;;;;;;;;;;;ACLb,MAAM,OAAO;IAApB;QAME,aAAQ,GAAU;YAEhB;gBACA,IAAI,EAAC,MAAM;gBACX,OAAO,EAAC,MAAM;gBACd,OAAO,EAAC,MAAM;gBACd,SAAS,EAAC,MAAM;gBAChB,GAAG,EAAC,MAAM;aACb;SAAC;IACF,CAAC;CAAA;AAOM,MAAM,YAAY;;wEAAZ,YAAY;4FAAZ,YAAY;;QCzBzB,wEAAkB;QAAA,sEAAW;QAAA,4DAAK;QAClC,gFAAmD;QAAvC,sSAAe,kBAAsB,IAAC;QAAC,4DAAa;QAChE,kFAAoC;;;;;;;;;;;;;;ACFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AAEV;AACL;AAGN;AACgB;AACH;AACf;;AAiBtC,MAAM,SAAS;;kEAAT,SAAS;wFAAT,SAAS,cAFR,2DAAY;6FADb,CAAC,gFAAkB,CAAC,YALtB;YACP,uEAAa;YACb,qEAAgB;YAChB,0DAAW;SACZ;mIAIU,SAAS,mBAZlB,2DAAY;QACZ,2EAAgB;QAChB,wEAAe,aAGf,uEAAa;QACb,qEAAgB;QAChB,0DAAW;kEAPX,2DAAY,GAEZ,wEAAe;IADf,2EAAgB;;;;;;;;;;;;;ACTpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AACtB;;;;;ICMrB,yEAA4D;IAExD,oEAAyC;IAAA,gEAAI;IAC7C,sEAAM;IAAA,4EAA6B;IAAA,uDAAgC;IAAA,4DAAS;IAAA,6EAA8C;IAAA,uDAAkC;IAAA,4DAAS;IAAA,4DAAM;IAAA,gEAAI;IAC/K,yEAAQ;IACJ,uEAAK;IAAA,wDAAiC;IAAA,4DAAM;IAC5C,uEAAK;IAAA,4EAAyB;IAAA,wDAA6C;;IAAA,4DAAQ;IAAA,4DAAM;IACzF,uEAAK;IAAA,4EAAyB;IAAA,wDAAoB;IAAA,4DAAQ;IAAA,4DAAM;IACpE,4DAAS;IAEb,4DAAK;;;;IARI,0DAAkC;IAAlC,2KAAkC;IACJ,0DAAgC;IAAhC,qHAAgC;IAAuD,0DAAkC;IAAlC,uHAAkC;IAEnJ,0DAAiC;IAAjC,wGAAiC;IACR,0DAA6C;IAA7C,gLAA6C;IAC7C,0DAAoB;IAApB,wFAAoB;;;ADJ/D,MAAM,gBAAgB;IAwB3B,YAAoB,WAA+B;QAA/B,gBAAW,GAAX,WAAW,CAAoB;QAvBnD,YAAO,GAAW;YAChB,QAAQ,EAAC,QAAQ;YACjB,IAAI,EAAC,EAAE;YACP,KAAK,EAAC,MAAM;YACZ,WAAW,EAAE,EAAE;YAEb,QAAQ,EAAC,CAAC;oBACV,IAAI,EAAC,EAAE;oBACP,OAAO,EAAC,CAAC;oBACT,OAAO,EAAC,CAAC;oBACT,SAAS,EAAC,EAAE;oBACZ,GAAG,EAAC,CAAC;iBAER,CAAC;SACD;QAKD,aAAQ,GAAG,iBAAiB,CAAC;IAI0B,CAAC;IARxD,MAAM,CAAC,OAAgB;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO;IACxB,CAAC;IAID,QAAQ,KAAG,CAAC;IAGZ,aAAa,CAAC,UAAU;QACtB,IAAI,SAAS,GAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACrD,yDAAyD;QAEzD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAG,SAAS,CAAC;QAG5C,IAAI,QAAQ,GAAG,IAAI,oEAAQ,EAAE,CAAC;QAC9B,IAAI,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,cAAc,CAAE,CAAC;QACvD,SAAS,CAAC,OAAO,GAAE,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,EAAC,EAAE,EAAC,CAAC,CAAC;QAGjD,IAAI,KAAK,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;QACzD,IAAI,SAAS,GAAC;YACZ,IAAI,EAAC,IAAI;SACV,CAAC;QAEF,SAAS,CAAC,UAAU,CAAC,IAAI,EAAG,IAAI,CAAC,CAAC;QAClC,IAAI,IAAI,GAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,KAAK;QACtB,IAAI,CAAC,IAAI,GAAG;YACV,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;SAC1B;QACD,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACjC,IAAI,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,QAAQ,CAAC,KAAK,GAAG,cAAc;QAC/B,QAAQ,CAAC,IAAI,GAAG;YACd,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,QAAQ;YACnB,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;SAC1B;QACD,QAAQ,CAAC,SAAS,GAAG,KAAK;QAC1B,OAAO,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAClC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;QAEpB,iBAAiB;QACjB,SAAS,CAAC,UAAU,CAAC,IAAI,EAAC,IAAI,CAAC,CAAC;QAChC,IAAI,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7C,cAAc,CAAC,KAAK,GAAG,kCAAkC,CAAC;QAC1D,cAAc,CAAC,SAAS,GAAC,KAAK,CAAC;QAC/B,cAAc,CAAC,IAAI,GAAG,SAAS,CAAC;QAChC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACrB,IAAI,kBAAkB,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAG,GAAG,CAAC;QACnF,kBAAkB,CAAC,SAAS,GAAG,KAAK,CAAC;QACrC,kBAAkB,CAAC,IAAI,GAAG,SAAS,CAAC;QACpC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,CAAC,EAAC,CAAC,EAAE,EAAC;YAClB,OAAO,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAElC,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACtC,GAAG,CAAC,SAAS,GAAG,KAAK;SACtB;QAED,OAAO,SAAS,CAAC,QAAQ,CAAE;QAC3B,OAAO,SAAS,CAAC,IAAI,CAAC;QACtB,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAC,IAAI,CAAC,OAAO,EAAG,QAAQ,EAAG,SAAS,EAAG,SAAS,EAAG,UAAU,CAAC;QAEjF,wBAAwB;QACxB,SAAS,CAAC,UAAU,CAAC,KAAK,EAAC,KAAK,CAAC,CAAC;QAClC,IAAI,WAAW,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC3C,WAAW,CAAC,KAAK,GAAG,gBAAgB,GAAI,SAAS,CAAC,YAAY,EAAE,CAAC;QACjE,WAAW,CAAC,SAAS,GAAC,KAAK,CAAC;QAC5B,WAAW,CAAC,IAAI,GAAG,SAAS,CAAC;QAC7B,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACrB,IAAI,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAG,GAAG,CAAC;QACpE,eAAe,CAAC,IAAI,GAAG,SAAS;QAChC,eAAe,CAAC,SAAS,GAAG,KAAK;QACjC,IAAI,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC;QACzC,IAAI,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,EAAC,GAAG,CAAC;QAC1C,GAAG,CAAC,SAAS,GAAG,KAAK;QAGrB,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE;YAC7C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,EAAE,mEAAmE,EAAE,CAAC,CAAC;YAChH,iDAAS,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC;IAIJ,CAAC;;gFAjHU,gBAAgB;gGAAhB,gBAAgB;QChB7B,yEAAuB;QACf,wEAAiC;QAC7B,yEAAoC;QAChC,oEAA4B;QAAA,gEAAI;QAChC,yEAA0B;QAAA,yEAAQ;QAAA,uDAAyB;QAAA,4DAAS;QAAA,4DAAM;QAAA,gEAAI;QAC9E,yEAAQ;QACJ,uEAAK;QAAA,wDAAiB;QAAA,4DAAM;QAC5B,4EAAyB;QAAA,iEAAK;QAAA,4DAAQ;QACtC,uEAAK;QAAA,4EAAyB;QAAA,wDAAoB;QAAA,4DAAQ;QAAA,4DAAM;QACpE,4DAAS;QAEb,4DAAM;QAEN,6GAUK;QACT,4DAAK;QAET,0EAAmB;QACf,0EAAmB;QACf,0EAAqB;QAAA,0EAAQ;QAAA,oEAAQ;QAAA,4DAAS;QAAA,4DAAM;QACpD,2EAA6B;QACzB,uEAAK;QAAA,iGAAqC;QAAA,4DAAM;QAChD,8EAAsE;QAAjC,yIAAS,8BAAsB,IAAC;QAAC,oEAAQ;QAAA,4DAAS;QAC3F,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;;QAhCe,0DAAsB;QAAtB,yJAAsB;QACO,0DAAyB;QAAzB,wGAAyB;QAElD,0DAAiB;QAAjB,kFAAiB;QAEQ,0DAAoB;QAApB,qFAAoB;QAKV,0DAAU;QAAV,0IAAU;;;;;;;;;;;;;;ACZtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwE;AAC7B;;;;AASpC,MAAM,eAAe;IAQ1B,YAAoB,WAA+B;QAA/B,gBAAW,GAAX,WAAW,CAAoB;QAJzC,gBAAW,GAA0B,IAAI,0DAAY,EAAW;QAC1E,YAAO,GAAY,IAAI,sDAAO,EAAE;QAChC,aAAQ,GAAW,QAAQ;QAC3B,aAAQ,GAAU,EAAE;IAGnB,CAAC;IATK,QAAQ;QACb,IAAI,CAAC,MAAM,EAAE;IACf,CAAC;IASD,MAAM;QACJ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACpD,4DAA4D;YAC5D,wBAAwB;YAGxB,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;YACnD,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC;YACvD,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;YAC3D,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;YAC5D,kCAAkC;YAClC,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,CAAC,EAAC,CAAC,EAAE,EAAC;gBAElB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAC;oBACzB,IAAI,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;oBACtE,OAAO,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC;oBACjE,OAAO,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC;oBACjE,SAAS,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;oBAC3E,GAAG,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;iBAClD;aACF;YAEC,IAAI,CAAC,QAAQ,GAAG,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QACrC,CAAC,CAAC;IACJ,CAAC;;8EArCU,eAAe;+FAAf,eAAe;QCX5B,0EAA6B;QAAtB,2IAAY,YAAQ,IAAC;QACxB,2EAA4G;QAAvB,qLAAsB;QAA3G,4DAA4G;QAAA,gEAAI;QAChH,sEAAsD;QACxD,4DAAO;;QAFgF,0DAAsB;QAAtB,iFAAsB;;;;;;;;;;;;;;;;;;;;ACDhE;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core';\nimport {forkJoin } from 'rxjs';\n\nlet serviceUrl: String = 'http://api.weatherapi.com/v1'\nlet apiKey: String = 'c3264ea7075f411ab81131540212305'  // insert your API key here\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherdataService {\n  constructor(private http: HttpClient) { }\n  load(location: String) {\n    let current = this.http.get(serviceUrl + '/current.json?key='+apiKey+'&q=' + location +'&aqi=no')\n    let forecast = this.http.get(serviceUrl+ '/forecast.json?key='+apiKey+'&q=' + location +'&days=6&aqi=no')\n    return forkJoin([current , forecast]);\n    \n  }\n  \n}\n","import { DisplayComponent } from './display/display.component';\nimport { Component } from '@angular/core';\n\nexport class Weather {\n  location:String\n  icon:string\n  feels:string\n  temperature:Number\n\n  forecast:[Object]=[\n   \n    {\n    icon:String,\n    maxtemp:Number,\n    mintemp:Number,\n    condition:String,\n    day:Number\n}]\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n\n\n}\n","<h1 class=\"title\">Weather App</h1>\n<app-select (onSelection)=\"display.update($event)\"></app-select>\n<app-display #display></app-display>\n\n","import { WeatherdataService } from './services/weatherdata.service';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {HttpClientModule} from '@angular/common/http'\n\n\nimport { AppComponent } from './app.component';\nimport { DisplayComponent } from './display/display.component';\nimport { SelectComponent } from './select/select.component';\nimport { FormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DisplayComponent,\n    SelectComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [WeatherdataService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Weather } from './../app.component';\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { WeatherdataService } from '../services/weatherdata.service';\n\n\n\nimport { Workbook } from 'exceljs/dist/exceljs.min.js';\nimport * as fs from 'file-saver';\n\n\n\n@Component({\n  selector: 'app-display',\n  templateUrl: './display.component.html',\n  styleUrls: ['./display.component.css']\n})\nexport class DisplayComponent implements OnInit {\n  weather :Weather ={\n    location:\"london\",\n    icon:\"\",\n    feels:\"cool\",\n    temperature: 22,\n    \n      forecast:[{\n      icon:\"\",\n      maxtemp:0,\n      mintemp:0,\n      condition:\"\",\n      day:0\n    \n  }]\n  }\n  update(weather: Weather) { \n    this.weather = weather \n  }\n\n  fileName = 'Excelsheet.xlsx';\n\n  ngOnInit(){}\n\n  constructor(private weatherData: WeatherdataService) { }\n  exportToExcel(exportdata){\n    let exceldata =JSON.parse(JSON.stringify(exportdata))\n    // exceldata.forecast =  new Object(exportdata.forecast);\n    \n    console.log(\"download started:\" , exceldata)\n  \n\n    let workbook = new Workbook();\n    let worksheet = workbook.addWorksheet(\"Weather data\" );\n    worksheet.columns =new Array(5).fill({width:20});\n      \n    \n    let align = { vertical: 'middle', horizontal: 'center' };\n    let fontstyle={\n      bold:true\n    };\n\n    worksheet.mergeCells('A1' , 'A4');\n    let date=worksheet.getCell('A1');\n    let dateToday = new Date();\n    date.value = dateToday.toDateString();\n    date.alignment = align\n    date.font = {\n      name: 'Calibri',\n      size: 10,\n      bold: true,\n      color: { argb: '0085A3' }\n    }\n    worksheet.mergeCells('B1', 'D4');\n    let titleRow = worksheet.getCell('C1');\n    titleRow.value = \"Weather data\"\n    titleRow.font = {\n      name: 'Calibri',\n      size: 16,\n      underline: 'single',\n      bold: true,\n      color: { argb: '0085A3' }\n    }\n    titleRow.alignment = align\n    delete exceldata.forecast[0].icon;\n    worksheet.addRow([])\n\n    // forecast data \n    worksheet.mergeCells('A6','D6');\n    let forecast_title = worksheet.getCell('A6');\n    forecast_title.value = \"forecast for the next three days\";\n    forecast_title.alignment=align;\n    forecast_title.font = fontstyle;\n    worksheet.addRow([]);\n    let headerrow_forecast = worksheet.addRow(Object.keys(exceldata.forecast[0]) , 'i')\n    headerrow_forecast.alignment = align;\n    headerrow_forecast.font = fontstyle;\n    console.log(headerrow_forecast);\n    for(let i=0;i<3;i++){\n      delete exceldata.forecast[i].icon;\n\n      let data = Object.values(exceldata.forecast[i])\n      let row = worksheet.addRow(data ,'i');\n      row.alignment = align\n    }\n\n    delete exceldata.forecast ;\n    delete exceldata.icon;\n    worksheet.addRow([])\n    console.log(\"here?\",this.weather , \"excel:\" , exceldata , \"export:\" , exportdata) \n\n    // weather details today\n    worksheet.mergeCells('A13','D13');\n    let today_title = worksheet.getCell('A13');\n    today_title.value = \"Weather as on \" +  dateToday.toDateString();\n    today_title.alignment=align;\n    today_title.font = fontstyle;\n    worksheet.addRow([]);\n    let headerrow_today = worksheet.addRow(Object.keys(exceldata) , 'i')\n    headerrow_today.font = fontstyle\n    headerrow_today.alignment = align\n    let data_today = Object.values(exceldata)\n    let row = worksheet.addRow(data_today,'i')\n    row.alignment = align\n\n\n    workbook.xlsx.writeBuffer().then((exceldata) => {\n      let blob = new Blob([exceldata], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n      fs.saveAs(blob, this.fileName);\n    })\n\n\n\n  }\n\n\n}\n","<div class=\"container\">\n        <ul class=\"weather-future cards\">\n            <div class=\"small-temperature-card\">\n                <img src=\"{{weather.icon}}\"><br>\n                <div class=\"celsius-text\"><strong>{{weather.temperature}}°C</strong></div><br>\n                <strong>\n                    <div>{{weather.feels}}</div>\n                    <small class=\"dull-text\">Today</small>\n                    <div><small class=\"dull-text\">{{weather.location}}</small></div>\n                </strong>\n           \n            </div>\n                \n            <li class=\"small-forecast-cards\" *ngFor ='let i of [0,1,2]'>\n                \n                <img src=\"{{weather.forecast[i].icon}}\" ><br>\n                <div ><strong class=\"celsius-text\">{{weather.forecast[i].maxtemp}}°</strong><strong style=\"color:rgba(66, 66, 66, 0.589)\">/{{weather.forecast[i].mintemp}}°C</strong></div><br>\n                <strong>\n                    <div>{{weather.forecast[i].condition}}</div>\n                    <div><small class=\"dull-text\">{{weather.forecast[i].day | date:'E, d MMM'}}</small></div>\n                    <div><small class=\"dull-text\">{{weather.location}}</small></div>\n                </strong>\n\n            </li>\n        </ul>\n        \n    <div class=\"cards\">\n        <div class=\"excel\">\n            <div class=\"heading\"><strong>Download</strong></div>\n            <div class=\"excel-card info\">\n                <div>click to download data to excel sheet</div>\n                <button class=\"submit\" type=\"submit\" (click)=\"exportToExcel(weather)\">Download</button>\n            </div>\n        </div>\n    </div>\n</div>","import { WeatherdataService } from './../services/weatherdata.service';\nimport { Component, OnInit ,Output , EventEmitter} from '@angular/core';\nimport { Weather } from '../app.component';\n\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.css']\n})\n\nexport class SelectComponent  {\n  public ngOnInit(){\n    this.submit()\n  }\n  @Output() onSelection: EventEmitter<Weather> = new EventEmitter<Weather>()  \n  weather: Weather = new Weather()\n  location: String = \"mumbai\"\n  forecast:object = {}\n  constructor(private weatherData: WeatherdataService) {\n\n   }\n  \n  submit() {\n    this.weatherData.load(this.location).subscribe(data => {\n      // console.log(\"data:\" ,data[1]['forecast']['forecastday']);\n      // console.log(data[1]);\n\n      \n      this.weather.location = data[0]['location']['name']\n      this.weather.temperature = data[0]['current']['temp_c']\n      this.weather.icon = data[0]['current']['condition']['icon']\n      this.weather.feels = data[0]['current']['condition']['text']\n      // this.weather.forecast = data[1]\n      for(let i=0;i<3;i++){\n        \n        this.weather.forecast[i]={\n        icon:data[1]['forecast']['forecastday'][i]['day']['condition']['icon'],\n        maxtemp:data[1]['forecast']['forecastday'][i]['day']['maxtemp_c'],\n        mintemp:data[1]['forecast']['forecastday'][i]['day']['mintemp_c'],\n        condition:data[1]['forecast']['forecastday'][i]['day']['condition']['text'],\n        day:data[1]['forecast']['forecastday'][i]['date']\n      }\n    }\n      \n      this.location = \"\"\n      this.onSelection.emit(this.weather)\n    })\n  }\n\n}\n\n","<form  (ngSubmit)=\"submit()\">\n    <input  class=\"input-text\" type=\"text\" placeholder=\"Enter the city name\" name=\"city\" [(ngModel)]=\"location\"><br>\n    <input class=\"submit\" type=\"submit\" value=\"Load data\">\n  </form>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}